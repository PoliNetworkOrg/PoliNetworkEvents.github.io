export const LayoutButton = () => import('../..\\..\\..\\components\\Layout\\Button.vue' /* webpackChunkName: "components/layout-button" */).then(c => wrapFunctional(c.default || c))
export const LayoutDescrizione = () => import('../..\\..\\..\\components\\Layout\\Descrizione.vue' /* webpackChunkName: "components/layout-descrizione" */).then(c => wrapFunctional(c.default || c))
export const LayoutFooter = () => import('../..\\..\\..\\components\\Layout\\Footer.vue' /* webpackChunkName: "components/layout-footer" */).then(c => wrapFunctional(c.default || c))
export const LayoutFrame = () => import('../..\\..\\..\\components\\Layout\\Frame.vue' /* webpackChunkName: "components/layout-frame" */).then(c => wrapFunctional(c.default || c))
export const LayoutHorizontalLine = () => import('../..\\..\\..\\components\\Layout\\HorizontalLine.vue' /* webpackChunkName: "components/layout-horizontal-line" */).then(c => wrapFunctional(c.default || c))
export const LayoutLogo = () => import('../..\\..\\..\\components\\Layout\\Logo.vue' /* webpackChunkName: "components/layout-logo" */).then(c => wrapFunctional(c.default || c))
export const LayoutMap = () => import('../..\\..\\..\\components\\Layout\\Map.vue' /* webpackChunkName: "components/layout-map" */).then(c => wrapFunctional(c.default || c))
export const LayoutNavigationBar = () => import('../..\\..\\..\\components\\Layout\\NavigationBar.vue' /* webpackChunkName: "components/layout-navigation-bar" */).then(c => wrapFunctional(c.default || c))
export const LayoutQuestion = () => import('../..\\..\\..\\components\\Layout\\Question.vue' /* webpackChunkName: "components/layout-question" */).then(c => wrapFunctional(c.default || c))
export const LayoutXImage = () => import('../..\\..\\..\\components\\Layout\\XImage.vue' /* webpackChunkName: "components/layout-x-image" */).then(c => wrapFunctional(c.default || c))

// nuxt/nuxt.js#8607
function wrapFunctional(options) {
  if (!options || !options.functional) {
    return options
  }

  const propKeys = Array.isArray(options.props) ? options.props : Object.keys(options.props || {})

  return {
    render(h) {
      const attrs = {}
      const props = {}

      for (const key in this.$attrs) {
        if (propKeys.includes(key)) {
          props[key] = this.$attrs[key]
        } else {
          attrs[key] = this.$attrs[key]
        }
      }

      return h(options, {
        on: this.$listeners,
        attrs,
        props,
        scopedSlots: this.$scopedSlots,
      }, this.$slots.default)
    }
  }
}
